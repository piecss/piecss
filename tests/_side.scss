///
/// Copyright (C) 2014 Babs GÃ¶sgens. All rights reserved.
/// Licensed under MIT; see LICENSE.txt
///

@import "init";

@include test-module("Side") {

    $a: 0;
    $b: 0px;
    $c: 1 .5;
    $d: 16px 24px;
    $e: 16px 24px 24px;
    $f: 16px 24px 32px 46px;
    $g: 1em 1em 1em 1em;

    @include test("[function] -sides() | Complete a list to four sides") {

        $ra: -sides($a);
        $rb: -sides($b);
        $rc: -sides($c);
        $rd: -sides($d);
        $re: -sides($e);
        $rf: -sides($f);
        $rg: -sides($g);

        @include assert-equal( $ra, 0 0 0 0, "#{$a} should equal 0 0 0 0" );
        @include assert-equal( $rb, 0px 0px 0px 0px, "#{$b} should equal 0px 0px 0px 0px" );
        @include assert-equal( $rc, 1 .5 1 .5, "#{$c} should equal 1 .5 1 .5" );
        @include assert-equal( $rd, 16px 24px 16px 24px, "#{$d} should equal 16px 24px 16px 24px" );
        @include assert-equal( $re, 16px 24px 24px 24px, "#{$e} should equal 16px 24px 24px 24px" );
        @include assert-equal( $rf, 16px 24px 32px 46px, "#{$f} should equal 16px 24px 32px 46px" );
        @include assert-equal( $rg, 1em 1em 1em 1em, "#{$g} should equal 1em 1em 1em 1em" );
    }

    @include test("[function] is-value-map() | Check if the argument is a value-map") {

        $ra: is-value-map($a);
        $rb: is-value-map($b);
        $rc: is-value-map($c);
        $rd: is-value-map($d);
        $re: is-value-map($e);
        $rf: is-value-map($f);
        $rg: is-value-map($g);

        @include assert-false( $ra, "#{$a} is not a value map" );
        @include assert-false( $rb, "#{$b} is not a value map" );
        @include assert-false( $rc, "#{$c} is not a value map" );
        @include assert-false( $rd, "#{$d} is not a value map" );
        @include assert-false( $re, "#{$e} is not a value map" );
        @include assert-false( $rf, "#{$f} is not a value map" );
        @include assert-false( $rg, "#{$g} is not a value map" );
    }

    @include test("[function] value-map() | Convert argument to value-map") {

        $map-a: value-map($a);
        $map-b: value-map($b);
        $map-c: value-map($c);
        $map-d: value-map($d);
        $map-e: value-map($e);
        $map-f: value-map($f);
        $map-g: value-map($g);

        @include assert-equal(map-keys($map-a), (top, right, bottom, left), "Map must contain keys top, right, bottom, left");
        @include assert-equal( $map-a, (top: 0, right: 0, bottom: 0, left: 0), "#{$a} should return (top: 0, right: 0, bottom: 0, left: 0)" );
        @include assert-equal( $map-b, (top: 0px, right: 0px, bottom: 0px, left: 0px), "#{$b} should return (top: 0px, right: 0px, bottom: 0px, left: 0px)" );
        @include assert-equal( $map-c, (top: 1, right: .5, bottom: 1, left: .5), "#{$c} should return (top: 1, right: .5, bottom: 1, left: .5)" );
        @include assert-equal( $map-d, (top: 16px, right: 24px, bottom: 16px, left: 24px), "#{$d} should return (top: 16px, right: 24px, bottom: 16px, left: 24px)" );
        @include assert-equal( $map-e, (top: 16px, right: 24px, bottom: 24px, left: 24px), "#{$e} should return (top: 16px, right: 24px, bottom: 24px, left: 24px)" );
        @include assert-equal( $map-f, (top: 16px, right: 24px, bottom: 32px, left: 46px), "#{$f} should return (top: 16px, right: 24px, bottom: 32px, left: 46px)" );
        @include assert-equal( $map-g, (top: 1em, right: 1em, bottom: 1em, left: 1em), "#{$g} should return (top: 1em, right: 1em, bottom: 1em, left: 1em)" );
    }

    @include test("[function] value-map-to-unit() | Convert all values in a value-map to the preset unit") {

        $map-a: value-map-to-unit(value-map($a));
        $map-b: value-map-to-unit(value-map($b));
        $map-c: value-map-to-unit(value-map($c));
        $map-d: value-map-to-unit(value-map($d));
        $map-e: value-map-to-unit(value-map($e));
        $map-f: value-map-to-unit(value-map($f));
        $map-g: value-map-to-unit(value-map($g));

        @include assert-equal( $map-a, (top: 0, right: 0, bottom: 0, left: 0), "#{$a} should return (top: 0, right: 0, bottom: 0, left: 0)" );
        @include assert-equal( $map-b, (top: 0, right: 0, bottom: 0, left: 0), "#{$b} should return (top: 0, right: 0, bottom: 0, left: 0)" );
        @include assert-equal( $map-c, (top: .5em, right: .25em, bottom: .5em, left: .25em), "#{$c} should return (top: .5em, right: .25em, bottom: .5em, left: .25em)" );
        @include assert-equal( $map-d, (top: 1em, right: 1.5em, bottom: 1em, left: 1.5em), "#{$d} should return (top: 1em, right: 1.5em, bottom: 1em, left: 1.5em)" );
        @include assert-equal( $map-e, (top: 1em, right: 1.5em, bottom: 1.5em, left: 1.5em), "#{$e} should return (top: 1em, right: 1.5em, bottom: 1.5em, left: 1.5em)" );
        @include assert-equal( $map-f, (top: 1em, right: 1.5em, bottom: 2em, left: 2.875em), "#{$f} should return (top: 1em, right: 1.5em, bottom: 2em, left: 2.88em)" );
        @include assert-equal( $map-g, (top: 1em, right: 1em, bottom: 1em, left: 1em), "#{$g} should return (top: 1em, right: 1em, bottom: 1em, left: 1em)" );
    }

    @include test("[function] value-map-to-unit() | Convert all values in a value-map to px") {

        $map-a: value-map-to-unit(value-map($a), 1px);
        $map-b: value-map-to-unit(value-map($b), 1px);
        $map-c: value-map-to-unit(value-map($c), 1px);
        $map-d: value-map-to-unit(value-map($d), 1px);
        $map-e: value-map-to-unit(value-map($e), 1px);
        $map-f: value-map-to-unit(value-map($f), 1px);
        $map-g: value-map-to-unit(value-map($g), 1px);

        @include assert-equal( $map-a, (top: 0, right: 0, bottom: 0, left: 0), "#{$a} should return (top: 0, right: 0, bottom: 0, left: 0)" );
        @include assert-equal( $map-b, (top: 0px, right: 0px, bottom: 0px, left: 0px), "#{$b} should return (top: 0px, right: 0px, bottom: 0px, left: 0px)" );
        @include assert-equal( $map-c, (top: 8px, right: 4px, bottom: 8px, left: 4px), "#{$c} should return (top: 8px, right: 4px, bottom: 8px, left: 4px)" );
        @include assert-equal( $map-d, (top: 16px, right: 24px, bottom: 16px, left: 24px), "#{$d} should return (top: 16px, right: 24px, bottom: 16px, left: 24px)" );
        @include assert-equal( $map-e, (top: 16px, right: 24px, bottom: 24px, left: 24px), "#{$e} should return (top: 16px, right: 24px, bottom: 24px, left: 24px)" );
        @include assert-equal( $map-f, (top: 16px, right: 24px, bottom: 32px, left: 46px), "#{$f} should return (top: 16px, right: 24px, bottom: 32px, left: 46px)" );
        @include assert-equal( $map-g, (top: 16px, right: 16px, bottom: 16px, left: 16px), "#{$g} should return (top: 16px, right: 16px, bottom: 16px, left: 16px)" );
    }
}
