// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content:
// 1. Functions
//    1a. Vertical Rhythm:
//        vrhythm
//        vrhythm-units
//    1b. Horizontal Rhythm
//        hrhythm
//        vrhythm-units
// 2. Mixins
//    2a. Vertical Rhythm:
//        vrhythm
//    2b. Horizontal Rhythm:
//        hrhythm
//    2c. Miscellaneaous;
//        debug-rhythm
 

// 1. Functions

/**
 * Calculates a value based on the [$rhythm](./#variable-rhythm).
 * 
 * @since 0.1
 *
 * @param {Int | Fraction} $span (1) - The number of rhythm-units (whole or fraction) to span
 *
 * @return {Number} - The calculated span in px
 */

@function rhythm($span: 1)
{
    @return $rhythm * $span;
}

/**
 * Calculates a value based on the [$rhythm](./#variable-rhythm).
 * 
 * @since 0.1
 * @deprecated
 *
 * @param {Int | Fraction} $span (1) - The number of rhythm-units (whole or fraction) to span
 *
 * @return {Number} - The calculated span in px
 */

@function vrhythm($span: 1)
{
    @return rhythm($span);
}


/**
 * Find the optimal rhythm units for a given font-size.
 * If the specified span is too small for the font-size, find the next best one 
 * based on a specified increment.
 *
 * @since 0.1
 * 
 * @param {Number} $font-size (16px) - The font-size in px
 * @param {Number} (1) $span - The number of rhythm units to span, 1 equals 1 $rhythm
 * @param {Number} (1) $increment - The increment in rhythm-units
 *
 * @return {Number} - The calculated span in px
 */

@function vrhythm-units($font-size: $default-font-size, $span: 1, $increment: 1)
{
    $line-height: $span * $rhythm;

    @if $font-size >= $line-height {
        // call line-height again, but increase span with increment
        @return vrhythm-units($font-size, $span + $increment, $increment);
    }

    @return $span;
}


/**
 * Calculates a value based on the [$gutter-width](./#variable-gutter-width) as declared in the Layout settings
 *
 * @example
 *  padding: hrhythm(.5);
 *  padding: to-unit( hrhythm(.5) );
 *  // Output:
 *  padding: 8px;
 *  padding: .5em;
 *
 * @since 0.1
 * 
 * @param {Number} $fraction (1/2) - A fraction, e.g. 1/2
 * @param {Value} $context (16px) - The font-size context, defaults to [$default-font-size](./#variable-default-font-size).
 *
 * @return {Number} - The calculated span in px
 */

@function hrhythm($fraction: 1/2, $context: $default-font-size)
{
    // Cannot multiply with 0
    @if $fraction == 0 {
        @return $fraction;
    }

    @return $fraction * $gutter-width;
}


// 2. MIXINS


/**
 * Use for top and bottom margins and paddings.
 *
 * @example
 *  @include vrhythm(1, padding-top);
 *
 * @since 0.1
 *
 * @param {Number} $span - The number of rhythm-units - whole or fraction - to span
 * @param {String} $property - The property to be set, e.g. padding, margin-top
 * @param {Value} $context (16px) - The font-size context
 */

@mixin vrhythm($span, $property, $context: $default-font-size) 
{
    @if strip-unit($span)==0 {
        #{$property}: 0;
    }
    @else {
        @if unit($unit)==rem {
            #{$property}: $span*$default-line-height;
        }
        #{$property}: vrhythm($span);
    }
    
}


/**
 * Use for left and right margins and paddings. Uses  [$gutter-width](./#variable-gutter-width) declared in grid settings
 *
 * @example
 *  @include hrhythm(1, padding-left);
 * 
 * @since 0.1
 *
 * @param {Number} $fraction - The fraction of the gutter measurement
 * @param {String} $property - The property to be set, e.g. padding, margin-left
 * @param {Number} $context (16px) - The font-size context
 */

@mixin hrhythm($fraction, $property, $context: $default-font-size) 
{
    @if strip-unit($span)==0 {
        #{$property}: 0;
    }
    @if unit($unit)==rem {
        #{$property}: $fraction*$gutter-width;
    }
    #{$property}: hrhythm($fraction, $context);
}


/**
 * Reveals the document's vertical rhythm. Will automatically be mixed in when [$debug-rhythm](./#variable-debug-rhythm) is set to true.
 *
 * @since 0.1
 */

@mixin debug-rhythm()
{
    $to: transparent;
    $from: rgba(226, 255, 255, .5);

    background-image: -webkit-linear-gradient($from 50%, $to 50%);
    background-image: linear-gradient($from 50%, $to 50%);
    background-size: 2*$default-line-height 2*$default-line-height;

    * {
        background-color: transparent !important;
        background-image: none !important;
        outline: rgba(255,0,255,.1) dotted 1px;
        outline: #D6D6D6 dotted 1px;
        outline: lighten(rgb(255,0,255),.1) dotted 1px \9;
    }
}