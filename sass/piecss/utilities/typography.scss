// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content
// 1. functions:
//    extract-type-style
//    extract-type-variant
//    extract-type-weight
//    extract-type-family
//    font-size
//    line-height
//    weight-number-to-string
// 2. mixins:
//    font
//    font-style
//    font-variant
//    font-weight
//    font-family
//    font-size
//    line-height


// 1. FUNCTIONS


/**
 * Extract the style property from a type array
 *
 * @since 0.1
 *
 * @todo parameter should either be a space separated list, or property map
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 *
 * @return {String} - font-type property
 */

@function extract-type-style($type) {
    @return nth($type, 1);
}


/**
 * Extract the variant property from a type array
 *
 * @since 0.1
 *
 * @todo parameter should either be a space separated list, or property map
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 *
 * @return {String} - font-variant property
 */

@function extract-type-variant($type)
{
    @return nth($type, 2);
}


/**
 * Extract the weight property from a type array
 *
 * @since 0.1
 *
 * @todo parameter should either be a space separated list, or property map
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 *
 * @return {String} - font-weight property
 */

@function extract-type-weight($type)
{
    @return nth($type, 3);
}


/**
 * Extract the family property from a type array
 *
 * @since 0.1
 *
 * @todo parameter should either be a space separated list, or property map
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 *
 * @return {String} - font-family property
 */

@function extract-type-family($type)
{
    @return nth($type, 4);
}


/**
 * @alias to-unit
 * @deprecated
 */

@function font-size($target-px, $unit: $unit, $context: $default-font-size)
{
    @return to-unit($target-px, $unit, $context);
}


/**
 * Find the optimal line-height for a given font-size.
 * If the specified span is too small for the font-size, find the next best one based on the specified increment.
 *
 * @since 0.1
 *
 * @param {Number} $font-size - the font-size in px
 * @param {Number} $span (1) - the desired line-height in rhythm-units, 1 equals 1 $rhythm
 * @param {Number} $increment (1) - the increment in rhythm-units
 *
 * @return {Number} - line-height in px
 */

@function line-height($font-size: $default-font-size, $span: 1, $increment: 1)
{
    $line-height: $span * $rhythm;

    @if $font-size >= $line-height {
        // call line-height again, but increase span with increment
        @return line-height($font-size, $span + $increment, $increment);
    }

    @return $line-height;
}


/**
 * Returns the correct typographic weight corresponding to the weight number
 *
 * @since 0.1
 *
 * @throws Not a valid weight
 *
 * @param {Number} $weight (400) - a valid weight number: 100 | ... | 900
 *
 * @return {String} - weight, defaults to 'regular'
 */

@function weight-number-to-string($weight: regular)
{
    @if $weight == 100 { @return "ultra-light"; }
    @if $weight == 200 { @return "light"; }
    @if $weight == 300 { @return "book"; }
    @if $weight == 400 { @return "regular"; }
    @if $weight == 500 { @return "medium"; }
    @if $weight == 600 { @return "semi-bold"; }
    @if $weight == 700 { @return "bold"; }
    @if $weight == 800 { @return "extra-bold"; }
    @if $weight == 900 { @return "heavy"; }
    @else {
        @warn "Not a valid weight";
        @return false;
    }
}


// 2. MIXINS


/**
 * Mixes in the shorthand font tag. This is the only mixin that takes the font-size and line-height in their final unit of output.
 * More info: [$default-font-size](./#variable-default-font-size), [$default-line-height](./#variable-default-line-height)
 *
 * @since 0.1
 *
 * @todo Accept properties in the same way as the default CSS font implementation
 * 
 * @param {List | Bool} $type - a valid type array ($style, $variant, $weight, $family) or false to only output font-size and line-height
 * @param {Number} $font-size ($default-font-size) - font-size in the final unit of output
 * @param {Number} $line-height ($default-line-height) - line-height in the final unit of output
 */

@mixin font($type, $font-size:$default-font-size, $line-height:$default-line-height)
{
    @if unit($unit)==rem {
        @include font-size($font-size, 1px);
    }

    @if $type {
        $font-style     :   extract-type-style($type);
        $font-variant   :   extract-type-variant($type);
        $font-weight    :   extract-type-weight($type);
        $font-family    :   extract-type-family($type);

        font: #{$font-style} #{$font-variant} #{$font-weight} #{$font-size}/#{$line-height} #{$font-family};
    }
    @else {
        font: #{$font-size}/#{$line-height};
    }
}


/**
 * Extracts the style from a type array and mixes in font-style
 *
 * @since 0.1
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 */

@mixin font-style($type)
{
    font-style: extract-type-style($type);
}


/**
 * Extracts the variant from a type array and mixes in font-variant
 *
 * @since 0.1
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 */

@mixin font-variant($type)
{
    font-variant: extract-type-variant($type);
}


/**
 * Extracts the weight from a type array and mixes in font-weight
 *
 * @since 0.1
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 */

@mixin font-weight($type)
{
    font-weight: extract-type-weight($type);
}


/**
 * Extracts the family from a type array and mixes in font-family
 *
 * @since 0.1
 *
 * @param {List} $type: a valid type list ($style, $variant, $weight, $family)
 */

@mixin font-family($type)
{
    font-family: extract-type-family($type);
}


/**
 * Takes a size in px and calculates it back to the final font-unit. Provides fallback if the final output is in rem.
 *
 * @since 0.1
 *
 * @param {Number} $target-px - The font-size in px
 * @param {Number} $unit ($unit) - The final unit to which $target-px is converted, e.g.px | rem | em | %
 * @param {Number} $context ($default-font-size) - The context of the targeted element, for calculations to em or %
 */

@mixin font-size($target-px, $unit: $unit, $context: $default-font-size)
{
    @if unit($unit) == rem {
        font-size: $target-px;
    }
    font-size: to-unit($target-px, $unit, $context);
}

/**
 * Takes the font-size as an argument and calculates the best possible line-height for it.
 * If the $line-height-unit equals to 1%, it is used to calculate the line-height instead.
 * More info: [$default-font-size](./#variable-default-font-size), [$line-height-unit](./#variable-line-height-unit)
 *
 * @since 0.1
 *
 * @param {Number} $span - The number of rhythm-units - whole or fraction - to span
 * @param {Value} $context ($default-font-size) - The font-size context
 * @param {Number} $unit ($line-height-unit) - The final unit to which $target-px is converted, e.g.px | rem | em | %
 */

@mixin line-height($span, $context: $default-font-size, $line-height-unit: $line-height-unit)
{

    @if unit($line-height-unit) == "%" {
        line-height: $span * $default-line-height / $context * 100%;
    }
    @else {
        @include vrhythm($span, 'line-height', $context);
    }
}