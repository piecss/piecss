// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content
// 1. Functions
//    value-map
//    is-value-map
//    value-map-to-unit
//    -sides
// 2. Mixins
//    -unit-sides
//    -sides


// 1. FUNCTIONS


///
/// Takes a list of values and keys and returns a spacing map.
///
/// @since 0.1
///
/// @param {List} $values - A list of value arguments like CSS's normal padding (0 0 0 0)
/// @param {String} $property (padding) - The property to which the values should be applied
///

@function value-map($values, $keys: $keys-side) {

    // Make sure we have all sides, except when a map is used as an argument
    @if type-of($values)==map {
        @return $values;
    }
    $values: -sides($values);
    
    $-list: zip($keys, $values);

    $map: ();
    @each $pair in $-list {
        $map: map-merge($map, (nth($pair, 1): nth($pair, 2)));
    }

    @return $map;
}

///
/// Checks if a Map is a proper value-map by checking for specific keys.
///
/// @since 0.1
///
/// @param {List} $values - The value to test, can be a single number or a list
/// @param {List} $keys ($keys-side) - A list of keys to match
///
/// @return {Bool}
///

@function is-value-map($values, $keys: $keys-side) {

    // Start by assuming $values is not a map
    $is-map: false;

    // Simple test for a match to $keys, passes if there is a single match
    @if type-of($values)==map {

        @each $key in $keys {
            @if map-has-key($values, $key)==true {
                $is-map: true;
            }
        }
    }

    @return $is-map;
}

///
/// Converts values in a (one-dimensional) map to the specified [unit](./#variable-unit).
///
/// @since 0.1
///
/// @throws Argument $map needs to be a map.
///
/// @param {List} $values - The value to test, can be a single number or a list
/// @param {Number} $unit ($unit) - A list of keys to match
///
/// @return {Map}
///

@function value-map-to-unit($map, $unit: $unit) {

    @if not(type-of($map)==map) {
        @warn 'Argument $map needs to be a map.';
        @return $map;
    }

    // Convert to units
    @each $key, $value in $map {
        $map: map-merge($map, ($key: to-unit($value, $unit)));
    } 

    @return $map;   
}

///
/// This function takes a space separated list of padding or margin values and completes it into a list of four side values.
///
/// @since 0.1
/// @access private
///
/// @throws Argument $values needs to be a list.
///
/// @param {List} $values - The value to test, can be a single number or a list
///
/// @return {List}
///
@function -sides($values) {

    @if type-of($values)==map {
        @warn 'Argument $values needs to be a list or a single value.';
        @return $values;
    }

    // Check for the number of values and convert to a value map
    $length: length($values);
    @if $length==1 {
        $values: $values $values $values $values;
    } @elseif $length==2 {
        $values: nth($values, 1) nth($values, 2) nth($values, 1) nth($values, 2);
    } @elseif $length==3 {
        $values: nth($values, 1) nth($values, 2) nth($values, 3) nth($values, 2);
    } @elseif $length==4 {
        $values: nth($values, 1) nth($values, 2) nth($values, 3) nth($values, 4);
    }

    @return $values;
}


// 2. MIXINS


///
/// Mixin padding for any or all sides, in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Map} $sides - A spacing map in px (top:0,right:0,bottom:0,left:0)
///

@mixin padding($values) {

    @include -unit-sides($values, padding);
}

///
/// Mixin top padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin padding-top($value) {
    @include -unit-sides((top: $value), padding);
}

///
/// Mixin right padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin padding-right($value) {
    @include -unit-sides((right: $value), padding);
}

///
/// Mixin bottom padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin padding-bottom($value) {
    @include -unit-sides((bottom: $value), padding);
}

///
/// Mixin left padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin padding-left($value) {
    @include -unit-sides((left: $value), padding);
}


///
/// Mixin margin for any or all sides, in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Map} $sides - A spacing map in px (top:0,right:0,bottom:0,left:0)
///

@mixin margin($values) {

    @include -unit-sides($values, margin);
}

///
/// Mixin top margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin margin-top($value) {
    @include -unit-sides((top: $value), margin);
}

///
/// Mixin right margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin margin-right($value) {
    @include -unit-sides((right: $value), margin);
}

///
/// Mixin bottom margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin margin-bottom($value) {
    @include -unit-sides((bottom: $value), margin);
}

///
/// Mixin right margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
/// 
/// @since 0.1
/// 
/// @param {Number} $value - A value in px
///

@mixin margin-left($value) {
    @include -unit-sides((left: $value), margin);
}


///
/// Like [-sides](./#mixin--sides), but with rem fallback if the final unit is rem
///
/// @access private
///
/// @since 0.1
///
/// @param {Map} $sides - A spacing map in final values (top:0,right:0,bottom:0,left:0)
/// @param {String} $property - The property to apply the values to (padding, margin)
/// @param {Number} $unit ($unit) - The final unit to which $target-px is converted, e.g. 1px, 1rem, 1em, 1%
///

@mixin -unit-sides($values, $property: padding, $unit: $unit) {

    // This mixin needs a value-map to work, so convert argument if it is not a value-map;
    @if not(is-value-map($values, $keys-side)) {
        $values: value-map(-sides($values), $keys-side);
    }

    // now, Convert to units
    $unit-values: ();
    @each $key, $value in $values {
        $unit-values: map-merge($unit-values, ($key: to-unit($value, $unit)));
    }

    // Now, render the property and include rem fallback if needed
    @if unit($unit)==rem {
        @include -sides($values, $property);
    }
    @include -sides($unit-values, $property);
}


///
/// Mixin the value for any or all sides for padding or margin. The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used.
/// 
/// @access private
/// 
/// @since 0.1
///
/// @throws 'Argument $map needs to be a value map of four side (top, right, bottom, left) values. Mixin -sides aborted.';
/// 
/// @param {Map} $sides - A spacing map in final values (top:0,right:0,bottom:0,left:0)
/// @param {String} $property - The property to apply the values to (padding, margin)
///

@mixin -sides($values, $property: padding) {

    @if not(is-value-map($values, $keys-side)) {
        @warn 'Argument $map needs to be a value map of four side (top, right, bottom, left) values. Mixin -sides aborted.';
    } @else {

        // Initialize some variables
        $top: null;
        $right: null;
        $bottom: null;
        $left: null;

        @if map-has-key($values, top) {
            $top: map-get($values, top);
        }

        @if map-has-key($values, right) {
            $right: map-get($values, right);
        }

        @if map-has-key($values, bottom) {
            $bottom: map-get($values, bottom);
        }

        @if map-has-key($values, left) {
            $left: map-get($values, left);
        }

        @if length($values)==4 {

            @if ($top==$bottom and $right==$left and $top==$right) {
                #{$property}: #{$top};
            }
            @elseif ($top==$bottom and $right==$left) {
                #{$property}: #{$top} #{$right};
            }
            @else {
                #{$property}: #{$top} #{$right} #{$bottom} #{$left};
            }

        }
        @else {

            @if $top {
                #{$property}-top: #{$top};
            }
            @if $right {
                #{$property}-right: #{$right};
            }
            @if $bottom {
                #{$property}-bottom: #{$bottom};
            }
            @if $left {
                #{$property}-left: #{$left};
            }

        }
    }
}
