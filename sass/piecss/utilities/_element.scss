// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content:
// 1. Functions
//    add-selector
//    add-properties
// 2. Mixins
//    get-properties
//    get-selectors


// 1. FUNCTIONS


///
/// Mixes in a new namespace (selector) and css properties into an elements collection.
///
/// @access public
/// @since 0.1
///
/// @param {Map} $elements - Map, a collection of $selector: $property pairs
/// @param {Map} $selector - The selector under which the properties will be rendered, for example: %placeholder
/// @param {Map} $properties (()) - Map of CSS properties
///
/// @return {Map}
///

@function add-selector($collection, $selector, $properties: ()) {
  $_: (
    #{$selector}: $properties
  );
  $collection: map-merge($collection, $_);
  @return $collection;
}

///
/// Mixes in properties into a selector namespace
///
/// @access public
/// @since 0.1
///
/// @param {Map} $properties - Map of CSS properties
/// @param {Map} $selector - The selector under which the properties will be rendered, for example: %placeholder
/// @param {Map} $elements - Map, a collection of $selector: $property pairs
/// @param {Bool} $force (false) - When true, append properties instead of overwrite properties
///
/// @return {Map}
///

@function add-properties($new-properties, $selector, $collection, $force: false) {

  @if not map-has-key($collection, $selector) {
    $collection: add-selector($collection, $selector);
  }

  // Merge the nested property-map first
  $properties: map-get($collection, $selector);

  // Loop over existing properties
  $_ps: ();
  $_vs: ();
  @each $property in $properties {
    $_ps: append($_ps, nth($property, 1));
    $_vs: append($_vs, nth($property, 2));
  }

  // Loop over new properties to find duplicates
  @each $_p, $_v in $new-properties {

    @if index($_ps, $_p) {
      $_old_v: nth($_vs, index($_ps, $_p));
      @if $_old_v == $_v {
        // Skip, this property and that value exist already
      }
      @if $_old_v != $_v and $force {
        // Add it, the author may do this purposefully (warn him just in case)
        @warn "Are you sure you want to declare \"#{$_p}\" again (\"#{$_old_v}\", \"#{$_v}\")?";
        $_ps: append($_ps, $_p);
        $_vs: append($_vs, $_v);
      }
    } @else {
      $_ps: append($_ps, $_p);
      $_vs: append($_vs, $_v);
    }
  }

  $collection: map-merge($collection, ($selector: zip($_ps, $_vs)));

  @return $collection;
}


// 2. MIXINS


///
/// Mixes in properties
///
/// @access public
/// @since 0.1
///
/// @param {Map} $element - Map of CSS properties
///

@mixin get-properties($selector) {
  // // Lift out properties that have their own mixins
  // @if map-has-key($element, margin) {
  //   $value: map-get($element, margin);
  //   $element: map-remove($element, margin);
  //   @include margin($value);
  // }
  // @if map-has-key($element, padding) {
  //   $value: map-get($element, padding);
  //   $element: map-remove($element, padding);
  //   @include padding($value);
  // }
  // /* Using Autoprefix now */
  // // @if map-has-key($element, border-radius) {
  // //     $value: map-get($element, border-radius);
  // //     $element: map-remove($element, border-radius);
  // //     @include border-radius($value);
  // // }
  // // @if map-has-key($element, box-shadow) {
  // //     $value: map-get($element, box-shadow);
  // //     $element: map-remove($element, box-shadow);
  // //     @include box-shadow($value);
  // // }
  // @if map-has-key($element, font-type) {
  //   $value: ();
  //   $value: append($value, map-get($element, font-type));
  //   @if map-has-key($element, font-size) {
  //     $value: append(($value), map-get($element, font-size));
  //   }
  //   @if map-has-key($element, line-height) {
  //     $value: append($value, map-get($element, line-height));
  //   }
  //   $element: map-remove($element, font-family);
  //   $element: map-remove($element, font-size);
  //   $element: map-remove($element, line-height);
  //   $element: map-remove($element, font);
  //
  //   @include font(nth($value, 1), nth($value, 2), nth($value, 3));
  // }
  // @if map-has-key($element, font) {
  //   $value: map-get($element, font);
  //   $element: map-remove($element, font);
  //   @include font(nth($value, 1), nth($value, 2), nth($value, 3));
  // }

  @each $property in $selector {
    #{nth($property, 1)}: unquote(nth($property, 2));
  }
}


///
/// Mixes in all elements from an element collection
///
/// @access public
/// @since 0.1
///
/// @param {Map} $elements - Map, a collection of $selector: $property pairs
///

@mixin get-selectors($collection) {
  $selectors: map-keys($collection);

  @each $selector in $selectors {
    #{$selector} {
      $element: map-get($collection, $selector);
      @include get-properties($element);
    }
  }
}
