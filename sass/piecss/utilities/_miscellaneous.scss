// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content:
// 1. Functions
//    to-bool
// 2. Mixins
//    property
//    border
//    outline
//    old-ie
//    old-mozilla
//    inline-block


// 1. Functions


///
/// Converts a value to a proper boolean value
/// 
/// @since 0.1
///
/// @param {*} $value
///
/// @return {Bool}
///

@function to-bool($value) {
  @if not $value or $value == "" or $value == 0 {
    @return false;
  }
  @return true;
}

///
/// Converts a list of property values to a property map. Use to convert 'old-style' associative arrays to SASS's new Map type.
/// 
/// @example
/// list-to-map((color #FFF, text-align left))
///  // Output:
///  (color: #FFF, text-align: left)
///
/// @since 0.1
///
/// @param {List} $properties
///
/// @return {Map}
///

@function list-to-map($properties)
{
    $map: ();
    @each $property in $properties {
        $map: map-merge($map, ( nth($property,1): nth($property,2) ) );
    }

    @return $map;
}


// 2. Mixins


///
/// Mixin for border properties
/// 
/// @since 0.1
///
/// @param {String | Map | List | Numner} $values - The border (or outline) properties
/// @param {Bool} $outline - If true, will render the values as outline properties
///

@mixin border($values, $outline: false)
{
    // This mixin needs a value-map to work, so convert argument if it is not a value-map;
    @if not(is-value-map($values, $keys-border)) {
        $values: value-map($values, $keys-border);
    }

    $property: if($outline, outline, border);

    // Rem fallback
    $width: map-get($values, width);
    @if type-of($width)==number and unit($width)==rem {
        #{$property}-width: to-px($width);
    }

    @if map-has-key($values, width) and map-has-key($values, style) and map-has-key($values, color) {
        #{$property}: map-get($values, width) map-get($values, style) map-get($values, color);
    }
    @else {
        @each $key, $value in $values {
            #{$property}-#{$key}: $value;
        }
    }

}

///
/// @alias border
///

@mixin outline($attributes)
{
    @include border($attributes, true);
}


///
/// Provides a cross-browser method to implement opacity. This replaces [Compass's](http://compass-style.org/reference/compass/css3/opacity/) mixin by the same name with a more accessible implementation.
/// 
/// @since 0.1
///
/// @param {Number} $opacity - A number between 0 and 1, where 0 is transparent and 1 is opaque.
///

@mixin opacity($opacity) {
    @include old-ie() {
        filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    }
    opacity: $opacity;
}


///
/// Conditional mixin of property
/// 
/// @since 0.1
/// @deprecated
///
/// @param {String} $property - A CSS property
/// @param {Bool | *} $value - A value for the property, or false if the property should not be rendered.
///

@mixin property($property, $value)
{
    @if to-bool($value) {
        $property: $value;
    }
}

///
/// Support for old-mozilla, cuse it to separate old-ie declarations from your other declarations with either a separate stylesheet or added specificity (Modernizr). 
/// 
/// @since 0.1
///
/// @example
///  @include old-ie() { // properties }
///

@mixin old-ie() {
    @if $legacy-support-for-ie {
        @content;
    }
}


///
/// Support for old-mozilla, cuse it to separate old-mozilla declarations from your other declarations with either a separate stylesheet or added specificity (Modernizr). 
/// 
/// @since 0.1
///
/// @example
///  @include old-mozilla() { // properties }
///

@mixin old-mozilla() {
    @if $legacy-support-for-mozilla {
        @content;
    }
}


///
/// Provides a cross-browser method to implement display: inline-block;. This replaces [Compass's](http://compass-style.org/reference/compass/css3/inline_block/) mixin by the same name with a more accessible implementation.
/// See for valid property values: [http://www.w3schools.com/cssref/pr_pos_vertical-align.asp](http://www.w3schools.com/cssref/pr_pos_vertical-align.asp)
/// 
/// @since 0.1
///
/// @example
///  @include inline-block(baseline); 
///
/// @param {String} $vertical-alignment (baseline) - Set $inline-block-alignment to none or false to disable the output of a vertical-align property in the inline-block mixin. Or set it to a legal value for vertical-align to change the default.
///

@mixin inline-block($vertical-alignment: baseline) {
    $vertical-alignment: unquote($vertical-alignment);

    @include old-mozilla() {
        display: -moz-inline-stack;
    }

    display: inline-block;
    @if to-bool($vertical-alignment) {
        vertical-align: #{$vertical-alignment};
    }

    @include old-ie() {
        zoom: 1;
        display: inline;
        vertical-align: #{$vertical-alignment};
    }
}

///
/// Accepts a string which a valid appearance
///
/// @since 0.1
///
/// @param {String} $appearance
///

@mixin reset-appearance($appearance)
{
    @include reset-webkit-appearance($appearance);
    @include reset-mozilla-appearance($appearance);
}




///
/// Accepts a string which a valid appearance
///
/// @since 0.1
///
/// @param {String} $appearance
///

@mixin reset-webkit-appearance($appearance)
{
    -webkit-appearance: $appearance; /* mobile firefox too! */
}


///
/// Accepts a string which a valid appearance
///
/// @since 0.1
///
/// @param {String} $appearance
///

@mixin reset-mozilla-appearance($appearance)
{
    -moz-appearance: $appearance; /* mobile firefox too! */
}
