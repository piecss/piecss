// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content:
// 1. Functions
//    -rhythm-units
//    rhythm
// 2. Mixins
//    2a. Vertical Rhythm:
//        vrhythm
//    2b. Horizontal Rhythm:
//        hrhythm
//    2c. Miscellaneaous;
//        debug-rhythm
 

// 1. Functions

///
/// Calculates a value based on the [$rhythm](./#variable-rhythm).
/// 
/// @since 0.1
/// @access private
///
/// @param {Int | Fraction} $units (1) - The number of -rhythm-units (whole or fraction) to span
///
/// @return {Number} - The calculated span in px
///

@function -rhythm-units($units: 1)
{
    @return abs($rhythm * $units);
}


///
/// Find the optimal rhythm units for a given size in px.
/// If the specified span is too small for the size, find the next best one 
/// based on a specified increment.
///
/// @since 0.1
/// 
/// @param {Number} $units - The number of rhythm units to span (whole or fraction), 1 equals 1 $rhythm
/// @param {Number} $size-px - The size in px
/// @param {Number} $increment - The increment in rhythm-units (whole or fraction)
///
/// @return {Number} - The calculated span in px
///

@function rhythm($args...)
{
    $units: false;
    $size-px: false;
    $increment: false;

    @each $var in $args {
        @if unitless($var) and not($units) {
            $units: $var;
        } @elseif unitless($var) and not($increment) {
            $increment: $var;
        } @elseif not(unitless($var)) and unit($var)==px {
            $size-px: $var;
        }
    }

    @if not($units) {
        $units: 1;
    }
    @if not($increment) {
        $increment: 1;
    }

    @if $size-px {
        @while $size-px >= -rhythm-units($units) {
            $units: $units + $increment;
        }
    }

    $span: -rhythm-units($units);

    @return $span;
}


// 2. MIXINS

///
/// Use for left and right margins and paddings. Uses  [$gutter-width](./#variable-gutter-width) declared in grid settings
///
/// @example
///  @include rhythm(1, padding-left);
/// 
/// @since 0.1
///
/// @param {Number} $units - The fraction of the gutter measurement
/// @param {String} $property - The property to be set, e.g. padding, margin-left
/// @param {Number} $context (16px) - The font-size context
///

@mixin rhythm($units, $property, $context: $default-font-size) 
{
    // @if strip-unit($units)==0 {
    //     #{$property}: 0;
    // }
    // @if unit($unit)==rem {
    //     #{$property}: $units*$gutter-width;
    // }
    // #{$property}: rhythm($units, $context);
}


///
/// Reveals the document's vertical rhythm. Will automatically be mixed in when [$debug-rhythm](./#variable-debug-rhythm) is set to true.
///
/// @since 0.1
///

@mixin debug-rhythm()
{
    $to: transparent;
    $from: rgba(226, 255, 255, .5);

    background-image: -webkit-linear-gradient($from 50%, $to 50%);
    background-image: linear-gradient($from 50%, $to 50%);
    background-size: 2*$default-line-height 2*$default-line-height;

* {
        background-color: transparent !important;
        background-image: none !important;
        outline: rgba(255,0,255,.1) dotted 1px;
        outline: #D6D6D6 dotted 1px;
        outline: lighten(rgb(255,0,255),.1) dotted 1px \9;
    }
}
