// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content
// 1. Functions:
//    strip-unit
//    to-unit
//    to-px


// 1. FUNCTIONS



///
/// Accepts a value and returns it without a value.
/// @link http://hugogiraudel.com/2013/08/12/sass-functions/ Courtesy Hugo Giraudel
///
/// @since 0.1
///
/// @param {Number} $value - A value in any unit (px, rem, em, %, pt)
///
/// @return {Number} - The value stripped of its unit
///

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}


///
/// Convert a px value to a new unit, within the context of it's containing element
///
/// @since 0.1
///
/// @throws Argument $number needs to be a number.
///
/// @param {Number} $target-px - The final size in px
/// @param {Number} $unit ($unit) - The final unit to which $target-px is converted, e.g. 1px, 1rem, 1em, 1%
/// @param {Number} $context ($default-font-size) - The context of the targeted element, for calculations to em
///
/// @return {Number} - The value in the requested unit
///

@function to-unit($number, $unit: $unit, $context: $default-font-size) {

  @if type-of($number) != number {
    @warn "Argument $number needs to be a number.";
    @return $number;
  }

  // We're dealing with a rhythm number, convert to px
  @if unitless($number) and not($number == 0) {
    $number: -rhythm-units($number);
  }

  // Convert value to px
  @if unit($number) != px {
    $number: to-px($number);
  }

  // Now, calculate the correct contextual value in requested unit
  @if unit($unit) == "px" {
  }
  @elseif unit($unit) == "%" {
    $number: percentage($number / $context);
  }
  @elseif unit($unit) == "rem" {
    $number: $number / $default-font-size * $unit;
  }
  @else {
    $number: $number / $context * $unit;
  }

  @return $number;
}

///
/// Convert a px value to a new unit, within the context of it's containing element
///
/// @throws Argument $value needs to be unitless, or set in px.
///
/// @since 0.1
///
/// @param {Number} $target-px - The final size in px
/// @param {Number} $unit ($unit) - The final unit to which $target-px is converted, e.g. 1px, 1rem, 1em, 1%
/// @param {Number} $context ($default-font-size) - The context of the targeted element, for calculations to em
///
/// @return {Number} - The value in the requested unit
///

@function px($value, $unit: $unit, $context: $default-font-size) {

  @if unit($value) != "px" {
    @warn "Argument $value needs to be unitless, or set in px.";
    @return $value;
  }

  @if unitless($value) {
    $value: $value * 1px;
  }

  @return to-unit($value, $unit, $context);
}


///
/// Convert any unit to a px value, within the context of it"s containing element
///
/// @since 0.1
///
/// @param {Number} $value - The value to convert, in any unit
/// @param {Number} $context ($default-font-size) - The context of the targeted element, for calculations to em
///
/// @return {Number} - The value in px
///

@function to-px($value, $context: $default-font-size) {

  @if unit($value) == "px" {
  }
  @elseif unit($value) == "rem" {
    $value: rem-to-px($value);
  }
  @elseif unit($value) == "em" {
    $value: em-to-px($value, $context);
  }
  @elseif unit($value) == "%" {
    $value: percentage-to-px($value);
  }

  @return $value;
}

///
/// Convert a value in rem to a px value
///
/// @since 0.1
///
/// @param {Number} $value - The value to convert
///
/// @return {Number} - The value in px
///

@function rem-to-px($value) {
  @return $default-font-size * strip-unit($value);
}

///
/// Convert a value in em to a px value
///
/// @since 0.1
///
/// @param {Number} $value - The value to convert
/// @param {Number} $context ($default-font-size) - The context of the targeted element
///
/// @return {Number} - The value in px
///

@function em-to-px($value, $context: $default-font-size) {
  @return $context * strip-unit($value);
}

///
/// Convert a value in em to a px value
///
/// @since 0.1
///
/// @todo Needs to take into account the context
///
/// @param {Number} $value - The value to convert
/// @param {Number} $context ($default-font-size) - The context of the targeted element
///
/// @return {Number} - The value in px
///

@function percentage-to-px($value, $context: $default-font-size) {
  @return $value / 100% * $context;
}
