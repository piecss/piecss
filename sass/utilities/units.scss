// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content
// 1. Functions:
//    strip-unit
//    to-unit
//    to-px
// 2. Mixins:
//    rem


// 1. FUNCTIONS

/**
 * Accepts a value and returns it without a value.
 * @link http://hugogiraudel.com/2013/08/12/sass-functions/ Courtesy Hugo Giraudel
 *
 * @since 0.1
 *
 * @param {Number} $value - A value in any unit (px, rem, em, %, pt)
 *
 * @return {Number} - The value stripped of its unit
 */

@function strip-unit($value)
{
    @if $value==0 {
        @return $value;
    }
    @return $value / ($value * 0 + 1);
}


/**
 * Convert a px value to a new unit, within the context of it's containing element
 *
 * @since 0.1
 *
 * @param {Number} $target-px - The final size in px
 * @param {Number} $unit ($unit) - The final unit to which $target-px is converted, e.g. px, rem, em, %
 * @param {Number} $context ($default-font-size) - The context of the targeted element, for calculations to em
 *
 * @return {Number} - The value in the requested unit
 */

@function to-unit($value, $unit: $unit, $context: $default-font-size)
{
    @if unit($value) != px {
        /* Convert the value to px first */
        $value: to-px($value);
    }

    @if unit($unit)=="%" {
        $value: percentage($value / $context);
    }
    @elseif unit($unit)=="px" {
        $value: $value;
    }
    @else {
        $value: $value / $context * $unit;
    }

    @return $value;
}


/**
 * Convert any unit to a px value, within the context of it's containing element
 *
 * @since 0.1
 *
 * @param {Number} $value - The value to convert, in any unit
 * @param {Number} $context ($default-font-size) - The context of the targeted element, for calculations to em
 * 
 * @return {Number} - The value in px
 */

@function to-px($value, $context: $default-font-size)
{
    @if unit($value)=="px" {
        @debug $value;
    }
    @elseif unit($value)=="rem" {
        $value: rem-to-px($value);
    }
    @elseif unit($value)=="em" {
        $value: em-to-px($value, $context);
    }
    @elseif unit($value)=="%" {
        $value: percentage-to-px($value);
    }

    @return $value;

}

/**
 * Convert a value in rem to a px value
 *
 * @since 0.1
 *
 * @param {Number} $value - The value to convert
 * 
 * @return {Number} - The value in px
 */

@function rem-to-px($value)
{
    @return $default-font-size * strip-unit($value);
}

/**
 * Convert a value in em to a px value
 *
 * @since 0.1
 *
 * @param {Number} $value - The value to convert
 * @param {Number} $context ($default-font-size) - The context of the targeted element
 * 
 * @return {Number} - The value in px
 */

@function em-to-px($value, $context: $default-font-size)
{
    @return $context * strip-unit($value);
}

/**
 * Convert a value in em to a px value
 *
 * @since 0.1
 *
 * @todo Needs to take into account the context
 *
 * @param {Number} $value - The value to convert
 * @param {Number} $context ($default-font-size) - The context of the targeted element
 * 
 * @return {Number} - The value in px
 */

s@function percentage-to-px($value, $context: $default-font-size1)
{
    @return $value/10% + 0px;
}


// 2. MIXINS


/**
 * Mixin a property in rem and the fallback in another unit
 *
 * @since 0.1
 *
 * @param {Number} $target-px - The targeted size in px
 * @param {String} $property - The property-name
 * @param {Number} $unit ($fallback-unit) - The fallback unit to use
 * @param {Number} $context-px ($default-font-size) - The context of the targeted element
 */

@mixin rem($target-px, $property, $unit: $fallback-unit, $context: $default-font-size)
{
    #{$property}: to-unit($target-px, $context, $fallback-unit);
    #{$property}: to-unit($target-px, $default-font-size, 1rem);
}