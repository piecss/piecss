// Copyright (C) 2014 Babs GÃ¶sgens. Licensed under MIT; see LICENSE.txt


// Content
// 1. Functions
//    value-map
// 2. Mixins
//    padding
//    padding-top
//    padding-right
//    padding-bottom
//    padding-left
//    margin
//    margin-top
//    margin-right
//    margin-bottom
//    margin-left
//    -unit-sides
//    -sides


// 1. FUNCTIONS


/**
 * Takes a list of values and returns a spacing map
 *
 * @since 0.1
 *
 * @param {*} $sides - A list of value arguments like CSS's normal padding (0 0 0 0)
 * @param {String} $property (padding) - The property to which the values should be applied
 */

@function value-map($sides, $property: padding)
{
    // SASS appends a comma to the $sides list,
    // don't know how to get around this but list the values
    $sides: nth($sides,1);

    @if is-value-map($sides) {
        @return $sides;
    }

    // Create map to hold our spacing values;
    $spacing: ();

    @if $property==padding or $property==margin {
        $length: length($sides);
        @if $length==1 {
            $spacing: (top:$sides,right:$sides,bottom:$sides,left:$sides);
        }
        @elseif $length==2 {
            $spacing: (top:nth($sides,1),right:nth($sides,2),bottom:nth($sides,1),left:nth($sides,2));
        }
        @elseif $length==3 {
            $spacing: (top:nth($sides,1),right:nth($sides,2),bottom:nth($sides,3),left:nth($sides,2));
        }
        @else {
            $spacing: (top:nth($sides,1),right:nth($sides,2),bottom:nth($sides,3),left:nth($sides,4));
        }
    }

    @elseif str-index($property, top) {
        $spacing: (top: $sides);
    }

    @elseif str-index($property, right) {
        $spacing: (right: $sides);
    }

    @elseif str-index($property, bottom) {
        $spacing: (bottom: $sides);
    }

    @elseif str-index($property, left) {
        $spacing: (left: $sides);
    }

    @return $spacing;
}

/**
 * Checks if a Map is a proper value-map (side:value).
 *
 * @since 0.1
 *
 * @param {Map} - A value map
 *
 * @return {Bool}
 */

@function is-value-map($values)
{
    // Inspect the $sides array, is it alreay a spacing map?
    $is-map: false;
    @if map-has-key($values, top)==true {
        $is-map: true;
    }
    @elseif map-has-key($values, right)==true {
        $is-map: true;
    }
    @elseif map-has-key($values, bottom)==true {
        $is-map: true;
    }
    @elseif map-has-key($values, left)==true {
        $is-map: true;
    }

    @return $is-map;
}


// 2. MIXINS


/**
 * Mixin padding for any or all sides, in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
 * 
 * @since 0.1
 * 
 * @param {Map} $sides - A spacing map in px (top:0,right:0,bottom:0,left:0)
 */

@mixin padding($sides...)
{
    $sides: value-map($sides, padding);
    @include -unit-sides($sides, padding);
}
    /**
     * Mixin top padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin padding-top($value)
    {
        $sides: value-map($value, padding-top);
        @include -unit-sides($sides, padding);
    }

    /**
     * Mixin right padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin padding-right($value)
    {
        $sides: value-map($value, padding-right);
        @include -unit-sides($sides, padding);
    }

    /**
     * Mixin bottom padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin padding-bottom($value)
    {
        $sides: value-map($value, padding-bottom);
        @include -unit-sides($sides, padding);
    }

    /**
     * Mixin left padding in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin padding-left($value)
    {
        $sides: value-map($value, padding-left);
        @include -unit-sides($sides, padding);
    }


/**
 * Mixin margin for any or all sides, in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
 * 
 * @since 0.1
 * 
 * @param {Map} $sides - A spacing map in px (top:0,right:0,bottom:0,left:0)
 */

@mixin margin($sides...)
{
    $sides: value-map($sides, margin);
    @include -unit-sides($sides, margin);
}
    /**
     * Mixin top margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin margin-top($value)
    {
        $sides: value-map($value, margin-top);
        @include -unit-sides($sides, margin);
    }

    /**
     * Mixin right margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin margin-right($value)
    {
        $sides: value-map($value, margin-right);
        @include -unit-sides($sides, margin);
    }

    /**
     * Mixin bottom margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin margin-bottom($value)
    {
        $sides: value-map($value, margin-bottom);
        @include -unit-sides($sides, margin);
    }

    /**
     * Mixin right margin in final unit (defaults to em). The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used. With rem fallback if the final unit of output is rem.
     * 
     * @since 0.1
     * 
     * @param {Number} $value - A value in px
     */

    @mixin margin-left($value)
    {
        $sides: value-map($value, margin-left);
        @include -unit-sides($sides, margin);
    }

/**
 * Like [-sides](./#mixin--sides), but with rem fallback if the final unit is rem
 *
 * @access private
 *
 * @since 0.1
 *
 * @param {Map} $sides - A spacing map in final values (top:0,right:0,bottom:0,left:0)
 * @param {String} $property - The property to apply the values to (padding, margin)
 */

@mixin -unit-sides($sides, $property: padding)
{    
    // Convert the values into the final unit of output
    $unit-values: ();
    $fallback-values: ();

    $keys: map-keys($sides);
    @each $side in $keys {

        // Isolate the value
        $value: nth(map-get($sides, $side), 1);

        // Catch 0 values
        @if strip-unit($value)==0 {
            $value: 0px;
        }
        // Catch rhythm values
        @if unitless($value) {
            @if $side==top or $side==bottom {
                $value: vrhythm($value);
            }
            @if $side==right or $side==left {
                $value: hrhythm($value);
            }
        }

        // Create new maps
        @if unit($unit)==rem {
            $fallback-values: map-merge($fallback-values, ($side: to-unit($value, $fallback-values)) );
        }
        $unit-values: map-merge($unit-values, ($side: to-unit($value)) )
    }


    // Now, render the property and include rem fallback if needed
    @if unit($unit)==rem {
        @include -sides($fallback-values, $property);
    }
    @include -sides($unit-values, $property);
}


/**
 * Mixin the value for any or all sides for padding or margin. The mixin will determine if the shorthand notation, or a single side (...-top, ...-right, ...-bottom, --left) should be used.
 * 
 * @access private
 * 
 * @since 0.1
 * 
 * @param {Map} $sides - A spacing map in final values (top:0,right:0,bottom:0,left:0)
 * @param {String} $property - The property to apply the values to (padding, margin)
 */

@mixin -sides($sides, $property: padding)
{
    // Initialize some variables
    $top: '';
    $right: '';
    $bottom: '';
    $left: '';

    @if map-has-key($sides, top) {
        $top: map-get($sides, top);
        $top: if(abs($top)==0, 0, $top);
    }

    @if map-has-key($sides, right) {
        $right: map-get($sides, right);
        $right: if(abs($right)==0, 0, $right);
    }

    @if map-has-key($sides, bottom) {
        $bottom: map-get($sides, bottom);
        $bottom: if(abs($bottom)==0, 0, $bottom);
    }

    @if map-has-key($sides, left) {
        $left: map-get($sides, left);
        $left: if(abs($left)==0, 0, $left);
    }

    @if length($sides)==4 {

        @if ($top==$bottom and $right==$left and $top==$right) {
            #{$property}: #{$top};
        }
        @elseif ($top==$bottom and $right==$left) {
            #{$property}: #{$top} #{$right};
        }
        @else {
            #{$property}: #{$top} #{$right} #{$bottom} #{$left};
        }

    }
    @else {

        @if $top {
            #{$property}-top: #{$top};
        }
        @if $right {
            #{$property}-right: #{$right};
        }
        @if $bottom {
            #{$property}-bottom: #{$bottom};
        }
        @if $left {
            #{$property}-left: #{$left};
        }

    }
}