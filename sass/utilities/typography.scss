// /*
//  * Copyright (C) 2014 Babs GÃ¶sgens.
//  * Licensed under MIT; see LICENSE.txt
//  */


// ==========================================================================
// CONTENT
// ==========================================================================
//
// 1. functions:
//    extract-type-style
//    extract-type-variant
//    extract-type-weight
//    extract-type-family
//    font-size
//    line-height
//    weight-number-to-string
//
// 2. mixins:
//    font
//    font-style
//    font-variant
//    font-weight
//    font-family
//    font-size
//    line-height


// 1. FUNCTIONS
// ==========================================================================


// Extract the style property from a type array
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@function extract-type-style($type) {
    @return nth($type, 1);
}


// Extract the variant property from a type array
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@function extract-type-variant($type)
{
    @return nth($type, 2);
}


// Extract the weight property from a type array
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@function extract-type-weight($type)
{
    @return nth($type, 3);
}


// Extract the family property from a type array
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@function extract-type-family($type)
{
    @return nth($type, 4);
}


// Placeholder function for to-unit
// ==========================================================================

@function font-size($target-px, $unit: $unit, $context: $default-font-size)
{
    @return to-unit($target-px, $unit, $context);
}


// Find the optimal line-height for a given font-size.
// If the specified span is too small for the font-size, find the next best one 
// based on the specified increment.
//
// @return line-height in px
// --------------------------------------------------------------------------
// $font-size: the font-size in px
// $span: the desired line-height in rhythm-units, 1 equals 1 $rhythm
// $increment: the increment in rhythm-units
// ==========================================================================

@function line-height($font-size: $default-font-size, $span: 1, $increment: 1)
{
    $line-height: $span * $rhythm;

    @if $font-size >= $line-height {
        // call line-height again, but increase span with increment
        @return line-height($font-size, $span + $increment, $increment);
    }

    @return $line-height;
}


// ==========================================================================
// Function weight-number-to-string
// --------------------------------------------------------------------------
// Converts a weight number to a string and returns it
// --------------------------------------------------------------------------
// @param (integer) $weight a valid weight number: 100 through 900)
// @return (string) weight
// ==========================================================================

@function weight-number-to-string($weight)
{
    @if $weight == 100 { @return "ultra-light"; }
    @if $weight == 200 { @return "light"; }
    @if $weight == 300 { @return "book"; }
    @if $weight == 400 { @return "regular"; }
    @if $weight == 500 { @return "medium"; }
    @if $weight == 600 { @return "semi-bold"; }
    @if $weight == 700 { @return "bold"; }
    @if $weight == 800 { @return "extra-bold"; }
    @if $weight == 900 { @return "heavy"; }
    @else {
        @warn "Not a valid weight";
        @return false;
    }
}



// 2. MIXINS
// ==========================================================================


// Mixes in the shorthand font tag. This is the only mixin that takes the 
// font-size and line-height in their final unit of output
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family), false
//        to only output font and line-height
// $font-size: font-size in the final unit of output
// $line-height: line-height in the final unit of output
// ==========================================================================

@mixin font($type, $font-size:$default-font-size, $line-height:$default-line-height)
{
    @if unit($unit)==rem {
        @include font-size($font-size, 1px);
    }

    @if $type {
        $font-style     :   extract-type-style($type);
        $font-variant   :   extract-type-variant($type);
        $font-weight    :   extract-type-weight($type);
        $font-family    :   extract-type-family($type);

        font: #{$font-style} #{$font-variant} #{$font-weight} #{$font-size}/#{$line-height} #{$font-family};
    }
    @else {
        font: #{$font-size}/#{$line-height};
    }
}


// Extracts the style from a type array and mixes in font-style
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@mixin font-style($type)
{
    font-style: extract-type-style($type);
}


// Extracts the variant from a type array and mixes in font-variant
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@mixin font-variant($type)
{
    font-variant: extract-type-variant($type);
}


// Extracts the weight from a type array and mixes in font-weight
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@mixin font-weight($type)
{
    font-weight: extract-type-weight($type);
}


// Extracts the family from a type array and mixes in font-family
// --------------------------------------------------------------------------
// $type: a valid type array ($style, $variant, $weight, $family)
// ==========================================================================

@mixin font-family($type)
{
    font-family: extract-type-family($type);
}


// Takes a size in px and calculates it back to the final font-unit
// --------------------------------------------------------------------------
// $target-px: the font-size in px
// $context: the context of the targeted element (for calculations to em)
// $unit: the final unit to which $target-px is converted (px, rem, em, %)
// ==========================================================================

@mixin font-size($target-px, $unit: $unit, $context: $default-font-size)
{
    @if unit($unit) == rem {
        font-size: $target-px;
    }
    font-size: to-unit($target-px, $unit, $context);
}

// Takes the font-size as an argument and calculates the best possible
// line-height for it.
// --------------------------------------------------------------------------
// $font-size: the font-size in px
// $context: the context of the targeted element (for calculations to em)
// $unit: the final unit to which $target-px is converted (px, rem, em, %)
// ==========================================================================

@mixin line-height($span, $context: $default-font-size, $line-height-unit: $line-height-unit)
{

    @if unit($line-height-unit) == "%" {
        line-height: $span * $default-line-height / $context * 100%;
    }
    @else {
        @include vrhythm($span, 'line-height', $context);
    }
}