// /*
//  * Copyright (C) 2014 Babs GÃ¶sgens.
//  * Licensed under MIT; see LICENSE.txt
//  */


// ==========================================================================
//
// CONTENT
//
// ==========================================================================
//
// 1. Functions
//    1a. Vertical Rhythm:
//        vrhythm
//        vrhythm-units
//    1b. Horizontal Rhythm
//        hrhythm
//        vrhythm-units
// 2. Mixins
//    2a. Vertical Rhythm:
//        vrhythm
//    2b. Horizontal Rhythm:
//        hrhythm
//    2c. Miscellaneaous;
//        debug-rhythm


// ==========================================================================
//
// 1. FUNCTIONS
//
// 1A. VERTICAL RYHTHM
//
// ==========================================================================


// ==========================================================================
// Function vrhythm
// --------------------------------------------------------------------------
// Calculates a value based on the $rhythm
// --------------------------------------------------------------------------
// $span: The number of rhythm-units (whole or fraction) to span
// $context: The context of the targeted element (for calculations to em)
// ==========================================================================

@function vrhythm($span: 1, $context: $default-font-size)
{
    @return to-unit(($rhythm * $span), $unit, $context);
}


// Find the optimal rhythm units for a given font-size.
// If the specified span is too small for the font-size, find the next best one 
// based on the specified increment.
//
// @return rhythm units
// --------------------------------------------------------------------------
// $font-size: the font-size in px
// $span: the desired line-height in rhythm-units, 1 equals 1 $rhythm
// $increment: the increment in rhythm-units
// ==========================================================================

@function vrhythm-units($font-size: $default-font-size, $span: 1, $increment: 1)
{
    $line-height: $span * $rhythm;

    @if $font-size >= $line-height {
        // call line-height again, but increase span with increment
        @return vrhythm-units($font-size, $span + $increment, $increment);
    }

    @return $span;
}


// 1. FUNCTIONS
// ==========================================================================
// 1B. HORIZONTAL RYHTHM
// ==========================================================================


// Calculates a value based on the $gutter-width as declared in the Layout settings
// --------------------------------------------------------------------------
// $fraction: the fraction of the column measurement

// ==========================================================================

@function hrhythm($fraction: 1/2, $context: $default-font-size)
{
    // Cannot multiply with 0
    @if $fraction == 0 {
        @return $fraction;
    }

    @return to-unit(($fraction * $gutter-width), $unit, $context);
}


// 2. MIXINS
// ==========================================================================
// 2A. VERTICAL RYHTHM
// ==========================================================================


// Use for top and bottom margins and paddings
// Declare like: @include vrhythm(1, padding-top);
// --------------------------------------------------------------------------
// $span: The number of rhythm-units (whole or fraction) to span
// $property: The property to be set
// $context: The context of the targeted element (for calculations to em)
// ==========================================================================

@mixin vrhythm($span, $property, $context: $default-font-size) 
{
    @if strip-unit($span)==0 {
        #{$property}: 0;
    }
    @else {
        @if unit($unit)==rem {
            #{$property}: $span*$default-line-height;
        }
        #{$property}: vrhythm($span, $context);
    }
    
}


// 2. MIXINS
// ==========================================================================
// 2B. HORIZONTAL RYHTHM
// ==========================================================================


// Use for left and right margins and paddings
// Declare like: @include hrhythm(1, padding-top);
// Uses the project's $gutter-width variable as declared in the Persistent Grid module settings
// --------------------------------------------------------------------------
// $fraction: the fraction of the gutter measurement
// $property: The property to be set
// $context: The context of the targeted element (for calculations to em)
// ==========================================================================

@mixin hrhythm($fraction, $property, $context: $default-font-size) 
{
    @if strip-unit($span)==0 {
        #{$property}: 0;
    }
    @if unit($unit)==rem {
        #{$property}: $fraction*$gutter-width;
    }
    #{$property}: hrhythm($fraction, $context);
}


// 2C. MISCELLANEOUS
// ==========================================================================


// Renders the rhythm pattern in the background and outlines all elements.
// Use it to check or debug the rhythm.
// ==========================================================================

@mixin debug-rhythm()
{
    $to: transparent;
    $from: rgba(226, 255, 255, .5);

    background-image: -webkit-linear-gradient($from 50%, $to 50%);
    background-image: linear-gradient($from 50%, $to 50%);
    background-size: 2*$default-line-height 2*$default-line-height;

    * {
        background-color: transparent !important;
        background-image: none !important;
        outline: rgba(255,0,255,.1) dotted 1px;
        outline: #D6D6D6 dotted 1px;
        outline: lighten(rgb(255,0,255),.1) dotted 1px \9;
    }
}